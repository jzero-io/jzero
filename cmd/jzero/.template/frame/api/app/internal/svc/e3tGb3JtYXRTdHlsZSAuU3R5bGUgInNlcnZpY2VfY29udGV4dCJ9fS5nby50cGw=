package svc

import (
	configurator "github.com/zeromicro/go-zero/core/configcenter"
	{{ if has "model" .Features }}"github.com/jzero-io/jzero/core/stores/modelx"{{ end }}
	{{ if has "redis" .Features }}"github.com/jzero-io/jzero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/redis"
	"github.com/pkg/errors"{{ end }}

	"{{ .Module }}/internal/config"
	"{{ .Module }}/internal/middleware"
	{{ if has "model" .Features }}"{{ .Module }}/internal/model"{{ end }}
)

type ServiceContext struct {
	Config configurator.Configurator[config.Config]
	Middleware
	{{ if has "model" .Features }}SqlxConn sqlx.SqlConn
	Model model.Model{{ end }}
	{{ if has "redis" .Features }}RedisConn *redis.Redis
	Cache cache.Cache{{ end }}
}

func NewServiceContext(cc configurator.Configurator[config.Config]) *ServiceContext {
    sc := &ServiceContext{
		Config: cc,
	}

	{{ if has "model" .Features }}sc.SqlxConn = modelx.MustNewConn(sc.MustGetConfig().Sqlx.SqlConf){{ end }}
	{{ if has "redis" .Features }}sc.RedisConn = redis.MustNewRedis(sc.MustGetConfig().Redis.RedisConf){{ end }}
	{{ if has "redis" .Features }}sc.Cache = cache.NewRedisNode(sc.RedisConn, errors.New("cache not found"), cache.WithExpiry(time.Duration(5)*time.Second)){{ end }}
	{{ if and (has "model" .Features) (has "redis" .Features) }}sc.Model = model.NewModel(sc.SqlxConn, modelx.WithCachedConn(modelx.NewConnWithCache(sc.SqlxConn, sc.Cache))){{else if has "model" .Features }}sc.Model = model.NewModel(sc.SqlxConn){{ end }}
	sc.SetConfigListener()
	return sc
}