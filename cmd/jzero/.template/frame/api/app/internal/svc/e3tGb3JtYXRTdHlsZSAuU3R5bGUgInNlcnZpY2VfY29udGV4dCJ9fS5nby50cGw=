package svc

import (
	"github.com/jzero-io/jzero/core/configcenter"
	{{ if has "model" .Features }}"github.com/jzero-io/jzero/core/stores/modelx"{{ end }}
	{{ if has "redis" .Features }}"github.com/jzero-io/jzero/core/stores/cache"
	"github.com/jzero-io/jzero/core/stores/redis"
	"github.com/pkg/errors"{{ end }}

	"{{ .Module }}/internal/config"
	"{{ .Module }}/internal/middleware"
	{{ if has "model" .Features }}"{{ .Module }}/internal/model"{{ end }}
)

type ServiceContext struct {
	ConfigCenter configcenter.ConfigCenter[config.Config]
	Middleware
	{{ if has "model" .Features }}SqlxConn sqlx.SqlConn
	Model model.Model{{ end }}
	{{ if has "redis" .Features }}RedisConn *redis.Redis
	Cache cache.Cache{{ end }}
}

func NewServiceContext(cc configcenter.ConfigCenter[config.Config]) *ServiceContext {
    svcCtx := &ServiceContext{
		ConfigCenter: cc,
	}

	{{ if has "model" .Features }}svcCtx.SqlxConn = modelx.MustNewConn(cc.MustGetConfig().Sqlx.SqlConf){{ end }}
	{{ if has "redis" .Features }}svcCtx.RedisConn = redis.MustNewRedis(cc.MustGetConfig().Redis.RedisConf){{ end }}
	{{ if has "redis" .Features }}svcCtx.Cache = cache.NewRedisNode(svcCtx.RedisConn, errors.New("cache not found"), cache.WithExpiry(time.Duration(5)*time.Second)){{ end }}
	{{ if and (has "model" .Features) (has "redis" .Features) }}svcCtx.Model = model.NewModel(svcCtx.SqlxConn, modelx.WithCachedConn(modelx.NewConnWithCache(svcCtx.SqlxConn, svcCtx.Cache))){{else if has "model" .Features }}svcCtx.Model = model.NewModel(svcCtx.SqlxConn){{ end }}
	svcCtx.SetConfigListener()
	svcCtx.Middleware = svcCtx.NewMiddleware()
	return svcCtx
}