{{define "methodDefine"}}{{.MethodName | FirstUpper}}({{if or .IsStreamServer .IsStreamClient }}{{else}}ctx context.Context,{{end}}{{ .Request.FullName }}) ({{if or .IsStreamServer .IsStreamClient}}*restc.Request{{else}}{{.Response.FullName}}{{end}}, error){{end}}
// Code generated by jzero. DO NOT EDIT.

package {{.Package}}

import (
	{{if .UngroupedAPIs}}"context"

	{{end}}{{if .HasPlugins}}"{{.Module}}/plugins"

	{{end}}"github.com/jzero-io/jzero/core/restc"

	{{range $v := .Resources}}{{$v | ToCamel | lower}} "{{$.Module}}/typed/{{$v | lower}}"
	{{end}}{{range $v := .GoImportPaths | uniq}}"{{$v}}"
	{{end}}
)

type Clientset interface {
	Direct() restc.Client

	{{range $v := .Resources}}{{$v | ToCamel | FirstUpper}}() {{$v | ToCamel | lower}}.{{$v | ToCamel | FirstUpper}}
	{{end}}{{if .HasPlugins}}
	Plugins() plugins.Plugins
	{{end}}
	{{range $k, $v := .UngroupedAPIs}}// {{$v.MethodName}} {{.Comments}}
	// {{$v.Method}}:{{$v.URL}}
	{{template "methodDefine" $v}}
	{{end}}
}

type clientset struct {
	// direct client to request
	direct restc.Client

	{{range $v := .Resources}}{{$v | ToCamel | FirstLower}} {{$v | ToCamel | lower}}.{{$v | ToCamel | FirstUpper}}
	{{end}}{{if .HasPlugins}}
	plugins plugins.Plugins
	{{end}}
}

func (cs *clientset) Direct() restc.Client {
	return cs.direct
}

{{range $v := .Resources}}func (cs *clientset) {{$v | FirstUpper | ToCamel}}() {{$v | ToCamel |lower}}.{{$v | ToCamel | FirstUpper}} {
	return cs.{{$v | ToCamel | FirstLower}}
}

{{end}}{{if .HasPlugins}}func (cs *clientset) Plugins() plugins.Plugins {
	return cs.plugins
}

{{end}}

{{range $k, $v := .UngroupedAPIs}}func (cs *clientset) {{$v.MethodName | FirstUpper}}({{if or $v.IsStreamServer $v.IsStreamClient }}{{else}}ctx context.Context,{{end}}{{ $v.Request.FullName }}) ({{if or $v.IsStreamServer $v.IsStreamClient}}*restc.Request{{else}}{{$v.Response.FullName}}{{end}}, error) {
	{{if or $v.IsStreamServer $v.IsStreamClient}}request := cs.direct.Verb("{{$v.Method}}").
		Path(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			restc.PathParam{Name: "{{$p.Name}}", Value: in.{{$p.GoName}}},{{end}}
		)
	return request, nil{{else}}var resp {{$v.Response.FullName}}
		err := cs.direct.Verb("{{$v.Method}}").
		Path(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			restc.PathParam{Name: "{{$p.Name}}", Value: in.{{$p.GoName}}},{{end}}
		).
		Params({{if eq $v.Request.Body "*"}}{{else}}{{range $q := $v.QueryParams}}
			restc.QueryParam{Name: "{{$q.Name}}", Value: in.{{$q.GoName}}},{{end}}{{end}}
		).
		{{ if or (eq $v.Method "GET") (eq $v.Method "DELETE") }}{{else}}Body({{if eq $v.Request.Body ""}}nil{{else if eq $v.Request.Body "*"}}in{{else if or (ne $v.Method "GET") (ne $v.Method "DELETE")}}in.{{$v.Request.RealBodyName}}{{else}}nil{{end}}).{{end}}
		Do(ctx).
		Into(&resp, {{if $v.WrapCodeMsg}}&restc.IntoOptions{
			WrapCodeMsg:        true,
			{{if $v.WrapCodeMsgMapping}}WrapCodeMsgMapping: restc.WrapCodeMsgMapping{
				Code: "{{$v.WrapCodeMsgMapping.Code}}",
				Data: "{{$v.WrapCodeMsgMapping.Data}}",
				Msg:  "{{$v.WrapCodeMsgMapping.Msg}}",
			},{{end}}
		}{{else}}nil{{end}})

	if err != nil {
		return nil, err
	}

	return resp, nil{{end}}
}
{{end}}

func NewClientset(cli restc.Client) (Clientset, error) {
    cs := clientset{
		direct: cli,
		{{range $v := .Resources}}{{$v | ToCamel | FirstLower}}: {{$v | ToCamel | lower}}.New{{$v | ToCamel | FirstUpper}}(cli),
		{{end}}{{if .HasPlugins}}plugins: plugins.NewPlugins(cli),
		{{end}}
	}

	return &cs, nil
}