// Code generated by jzero. DO NOT EDIT.

package handler

import (
	"net/http"
	"path"
	"strings"
	"sync"

	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/core/search"
)

var RoutesCodesMap = map[string]string{
    {{ range $v := .Routes }}"{{ $v.Method | upper }}:{{ $v.Path }}":"{{ replace `/` `:` $v.Group | FirstLower }}:{{ $v.Handler | FirstLower}}",
    {{ end }}
}

var (
	MST  map[string]*search.Tree
	once sync.Once
)

func Route2Code(r *http.Request) string {
	once.Do(func() {
		RegisterRoute2Code(RoutesCodesMap)
	})
	if tree, ok := MST[strings.ToUpper(r.Method)]; ok {
		if result, ok := tree.Search(path.Clean(r.URL.Path)); ok {
			return result.Item.(string)
		}
	}

	return "unknown"
}

func RegisterRoute2Code(maps map[string]string) {
	if MST == nil {
		MST = make(map[string]*search.Tree)
	}
	for k, v := range maps {
		if splits := strings.Split(k, ":"); len(splits) >= 2 {
			if _, ok := MST[splits[0]]; ok {
				logx.Must(MST[splits[0]].Add(path.Clean(strings.Join(splits[1:], ":")), v))
			} else {
				tree := search.NewTree()
				logx.Must(tree.Add(strings.Join(splits[1:], ":"), v))
				MST[splits[0]] = tree
			}
		}
	}
}
