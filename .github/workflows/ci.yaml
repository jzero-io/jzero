name: jzero-ci

on:
  push:
    branches:
  pull_request:

jobs:
  golangci:
    name: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: '1.22.3'

      - name: Install Jzero and Grum
        run: |
          go install
          jzero check
          go install github.com/jaronnie/grum@latest

      - name: Test new project and run server
        run: |
          GITHUB_TOKEN=${{ secrets.ACCESS_TOKEN }} grum clone https://github.com/jzero-io/examples
          cd examples
          rm -rf quickstart
          jzero new quickstart
          cd quickstart && jzero gen && go mod tidy
          git add .
          git commit -m "chore(quickstart): update quickstart"
          go run main.go server
          cd ../..

      - name: Check for changes in the .template directory
        id: changes
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q '^.template/'; then
            echo ".template directory has changes."
            echo "::set-output name=template_changed::true"
          else
            echo ".template directory has no changes."
            echo "::set-output name=template_changed::false"          

      - name: Upload project to examples repo
        if: steps.changes.outputs.template_changed == 'true'
        run: |
          cd examples
          git push

      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

          # Optional: working directory, useful for monorepos
          working-directory: ./

          # Optional: golangci-lint command line arguments.
          args: --timeout 300s --verbose

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true