import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-DsAGDbRn.js";const t={};function l(p,i){return n(),e("div",null,[...i[0]||(i[0]=[a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>通过 go-zero 自研的 api 文件定义, 称为 api 可描述语言, 可用于</p><ul><li>自动生成多语言服务端代码</li><li>自动生成文档(json/html/swagger)</li><li>自动生成多语言客户端代码</li></ul><p>与 proto 文件有异曲同工之妙, 但是比 proto 更简单易用</p><p><a href="https://go-zero.dev/docs/tutorials" target="_blank" rel="noopener noreferrer">go-zero api 教程</a></p><figure><img src="http://oss.jaronnie.com/image-20250120232337438.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="api-字段校验" tabindex="-1"><a class="header-anchor" href="#api-字段校验"><span>api 字段校验</span></a></h2><blockquote><p>jzero 默认集成 <a href="https://github.com/go-playground/validator" target="_blank" rel="noopener noreferrer">https://github.com/go-playground/validator</a> 进行字段校验</p></blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">syntax</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;v1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> CreateRequest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">json:&quot;name&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> validate:&quot;gte=2,lte=30&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将-types-文件夹按照-go-package-进行分组" tabindex="-1"><a class="header-anchor" href="#将-types-文件夹按照-go-package-进行分组"><span>将 types 文件夹按照 go_package 进行分组</span></a></h2><div class="hint-container important"><p class="hint-container-title">go_package 的选项, 参考自 proto 文件, 能将 message 生成的结构体分组</p><p>在 api 文件中同理, go_package 选项能将定义的 type 生成的结构体分组</p><p>两大优点:</p><ol><li><p>避免默认生成的 types/types.go 爆炸</p></li><li><p>提升开发体验, 不同 group 下的 type 命名不会冲突</p></li></ol></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">syntax</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;v1&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	go_package:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;version&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并同一个-group-的-handler-logic-为同一个文件" tabindex="-1"><a class="header-anchor" href="#合并同一个-group-的-handler-logic-为同一个文件"><span>合并同一个 group 的 handler/logic 为同一个文件</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">@server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	prefix:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          /api/v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	group:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           system/user</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	compact_handler:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	compact_logic:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> simpleapi</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	@handler</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GetUserHandler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /system/user/getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (GetUser2Request) returns (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetUserResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	@handler</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> DeleteUserHandler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /system/user/deleteUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (DeleteUserRequest) returns (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">DeleteUserResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动生成-api-文件" tabindex="-1"><a class="header-anchor" href="#自动生成-api-文件"><span>自动生成 api 文件:</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">jzero</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ivm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> api</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完整命令如下:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">jzero</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ivm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> api</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --handlers</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get:List,get:Get,post:Edit,get:Delete</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,18)])])}const d=s(t,[["render",l],["__file","api.html.vue"]]),k=JSON.parse('{"path":"/guide/develop/api.html","title":"api 使用文档","lang":"zh-CN","frontmatter":{"title":"api 使用文档","icon":"eos-icons:api","star":true,"order":0.2,"category":"开发","tag":["Guide"],"description":"前言 通过 go-zero 自研的 api 文件定义, 称为 api 可描述语言, 可用于 自动生成多语言服务端代码 自动生成文档(json/html/swagger) 自动生成多语言客户端代码 与 proto 文件有异曲同工之妙, 但是比 proto 更简单易用 go-zero api 教程 api 字段校验 jzero 默认集成 https://g...","head":[["meta",{"property":"og:url","content":"https://docs.jzero.io/guide/develop/api.html"}],["meta",{"property":"og:site_name","content":"Jzero Framework"}],["meta",{"property":"og:title","content":"api 使用文档"}],["meta",{"property":"og:description","content":"前言 通过 go-zero 自研的 api 文件定义, 称为 api 可描述语言, 可用于 自动生成多语言服务端代码 自动生成文档(json/html/swagger) 自动生成多语言客户端代码 与 proto 文件有异曲同工之妙, 但是比 proto 更简单易用 go-zero api 教程 api 字段校验 jzero 默认集成 https://g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://oss.jaronnie.com/image-20250120232337438.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:29:21.000Z"}],["meta",{"property":"article:author","content":"jaronnie"}],["meta",{"property":"article:tag","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"api 使用文档\\",\\"image\\":[\\"http://oss.jaronnie.com/image-20250120232337438.png\\"],\\"dateModified\\":\\"2025-02-09T14:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jaronnie\\",\\"url\\":\\"https://github.com/jaronnie\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"api 字段校验","slug":"api-字段校验","link":"#api-字段校验","children":[]},{"level":2,"title":"将 types 文件夹按照 go_package 进行分组","slug":"将-types-文件夹按照-go-package-进行分组","link":"#将-types-文件夹按照-go-package-进行分组","children":[]},{"level":2,"title":"合并同一个 group 的 handler/logic 为同一个文件","slug":"合并同一个-group-的-handler-logic-为同一个文件","link":"#合并同一个-group-的-handler-logic-为同一个文件","children":[]},{"level":2,"title":"自动生成 api 文件:","slug":"自动生成-api-文件","link":"#自动生成-api-文件","children":[]}],"git":{"createdTime":1724234753000,"updatedTime":1739111361000,"contributors":[{"name":"jaron","email":"jaron@jaronnie.com","commits":6},{"name":"jaronnie","email":"jaron@jaronnie.com","commits":1}]},"readingTime":{"minutes":1.09,"words":326},"filePathRelative":"guide/develop/api.md","localizedDate":"2024年8月21日","excerpt":"<h2>前言</h2>\\n<p>通过 go-zero 自研的 api 文件定义, 称为 api 可描述语言, 可用于</p>\\n<ul>\\n<li>自动生成多语言服务端代码</li>\\n<li>自动生成文档(json/html/swagger)</li>\\n<li>自动生成多语言客户端代码</li>\\n</ul>\\n<p>与 proto 文件有异曲同工之妙, 但是比 proto 更简单易用</p>\\n<p><a href=\\"https://go-zero.dev/docs/tutorials\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">go-zero api 教程</a></p>","autoDesc":true}');export{d as comp,k as data};
